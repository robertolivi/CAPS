;*************************************************
;CAPS Initialize
;*************************************************
function caps::init

  ;-- allocate memory to pointer when initializing object
  self.const=ptr_new(/allocate)

  ;----------------------------------------------------------------
  ;--General Constants
  EVtoJ=double(1.6e-19)
  k=double(1.38e-23)
  e_mass=0.00054879518D ;mass of electron in AMU   
  

  ;----------------------------------------------------------------
  ;IMS
  ims_dt=0.0546875D
  ims_table_2='32771.219,32771.219,32771.219,27557.275,23166.219,19488.142,16387.242,13772.980,11588.768,9744.0712,8193.6211,6892.1478,5794.3836,4866.3776,4096.8105,3440.4156,2897.1918,2433.1888,2048.4051,1720.2074,1448.5963,1217.7944,1023.8988,861.22875,724.13373,608.74810,512.09812,430.61438,361.91812,304.52313,256.04875,215.30750,181.10813,152.26125,127.87563,107.65375,90.404999,76.130623,63.938123,53.826874,45.202500,38.065624,32.000625,26.905626,22.631250,19.028750,15.996251,13.456875,11.315625,9.5106252,8.0018751,6.7281254,5.6575000,4.7593750,4.0012501,3.3599999,2.8287500,2.3756251,2.0006251,1.6799999,1.4143750,1.1881250,0.0000000'
  ims_energies='46343.756,38964.969,32771.219,27557.275,23166.219,19488.142,16387.242,13772.980,11588.768,9744.0712,8193.6211,6892.1478,5794.3836,4866.3776,4096.8105,3440.4156,2897.1918,2433.1888,2048.4051,1720.2074,1448.5963,1217.7944,1023.8988,861.22875,724.13373,608.74810,512.09812,430.61438,361.91812,304.52313,256.04875,215.30750,181.10813,152.26125,127.87563,107.65375,90.404999,76.130623,63.938123,53.826874,45.202500,38.065624,32.000625,26.905626,22.631250,19.028750,15.996251,13.456875,11.315625,9.5106252,8.0018751,6.7281254,5.6575000,4.7593750,4.0012501,3.3599999,2.8287500,2.3756251,2.0006251,1.6799999,1.4143750,1.1881250,1.0000000'
  ;ims_energies='46343.75,38964.97,32771.22,27557.28,23166.22,19488.14,'+$
  ;             '16387.24,13772.98,11588.77,9744.07,8193.62,6892.15,'+$
  ;             '5794.38,4866.38,4096.81,3440.42,2897.19,2433.19,'+$
  ;             '2048.41,1720.21,1448.60,1217.79,1023.90,861.23,'+$
  ;             '724.13,608.75,512.10,430.61,361.92,304.52,256.05,'+$
  ;             '215.31,181.11,152.26,127.88,107.65,90.41,76.13,'+$
  ;             '63.94,53.83,45.20,38.07,32.00,26.91,22.63,19.03,'+$
  ;             '16.00,13.46,11.32,9.51,8.00,6.73,5.66,4.76,4.00,'+$
  ;             '3.36,2.83,2.38,2.00,1.68,1.41,1.19,1.00'
  ims_energies=double(strsplit(ims_energies,',',/extract))
  itop=alog(ims_energies[0]*1.17)         ;center energy + 17% fwhm
  ibottom=alog(ims_energies[62]*0.83) ;center energy - 17% fwhm
  ims_upper=[itop,(alog(ims_energies)+alog(ims_energies[1:62]))/2]
  ims_lower=[ims_upper[1:62],ibottom]
  ims_upper=exp(ims_upper)
  ims_lower=exp(ims_lower)



  ims_ctm=[[0.748, 0.101, 0.015, 0.007, 0.004, 0.000, 0.000, 0.000],$ 
           [0.101, 0.748, 0.101, 0.015, 0.007, 0.004, 0.000, 0.000],$
           [0.015, 0.101, 0.748, 0.101, 0.015, 0.007, 0.004, 0.000],$
           [0.007, 0.015, 0.101, 0.748, 0.101, 0.015, 0.007, 0.004],$
           [0.004, 0.007, 0.015, 0.101, 0.748, 0.101, 0.015, 0.007],$
           [0.000, 0.004, 0.007, 0.015, 0.101, 0.748, 0.101, 0.015],$
           [0.000, 0.000, 0.004, 0.007, 0.015, 0.101, 0.748, 0.101],$
           [0.000, 0.000, 0.000, 0.004, 0.007, 0.015, 0.101, 0.748]]
  ims_ctm=[[1.3618,-0.1835,-0.0013,-0.0083,-0.0047,0.0018,-0.0001,0.0001],$
           [-0.1835,1.3865,-0.1833,-0.0002,-0.0077,-0.0049,0.0018,-0.0001],$
           [-0.0013,-0.1833,1.3865,-0.1833,-0.0002,-0.0077,-0.0049,0.0018],$
           [-0.0083,-0.0002,-0.1833,1.3866,-0.1833,-0.0002,-0.0077,-0.0047],$
           [-0.0047,-0.0077,-0.0002,-0.1833,1.3866,-0.1833,-0.0002,-0.0083],$
           [0.0018,-0.0049,-0.0077,-0.0002,-0.1833,1.3865,-0.1833,-0.0013],$
           [-0.0001,0.0018,-0.0049,-0.0077,-0.0002,-0.1833,1.3865,-0.1835],$
           [0.0001,-0.0001,0.0018,-0.0047,-0.0083,-0.0013,-0.1835,1.3618]]

  geom8=4.27e-3+1.69e-3*exp(-1.*(alog10(ims_energies/1000.D)/3.15)) 
  geom1=geom8/8.
  geom=transpose([[geom1],[geom1],[geom1],[geom1],$
                  [geom1],[geom1],[geom1],[geom1]])/100.^2.
  IMS_GEOM=geom*2.D    ; <----- !!!!!!!!!!!!!!!!!!!!!!
  a1=0.111D
  a2=0.0665D
  b1=0.048D
  b2=0.265D
  eff1=(a1*alog(ims_energies/1000.+14.557)+b1)
  eff2=(a2*alog(ims_energies/1000.+14.557)+b2)
  

  ;--------------------------------------------------------------
  ;ELS
  els_energies='26040,22227,18991,16256,13876,11867,10143,8674,'+$
               '7415,6336,5416,4630,3956,3383,2890,2471,2112,1805,'+$
               '1544,1319,1128,964.1,824.0,704.3,601.8,514.8,439.4,'+$
               '375.9,321.5,274.8,235.0,200.9,171.7,146.9,125.1,'+$
               '107.4,91.76,78.18,67.15,57.45,49.00,41.81,35.84,'+$
               '30.49,26.34,22.21,19.26,16.33,13.98,11.64,9.89,8.72,'+$
               '7.56,6.39,5.23,4.64,4.06,3.48,2.90,2.32,1.74,1.16,0.58'
  els_energies=double(strsplit(els_energies,',',/extract))
  etop=els_energies[0]*1.17         ;center energy + 17% fwhm
  ebottom=els_energies[62]*0.83 ;center energy - 17% fwhm
  els_upper=[etop,(els_energies+els_energies[1:62])/2]
  els_lower=[els_upper[1:62],ebottom]
  els_dt=(3.125e-2)*0.75 ;25% dead time
  eff_temp=replicate(1.,63)
  els_eff=[[eff_temp],[eff_temp],[eff_temp]]
  a1='6.7104228E-8 7.0764056E-8 7.4401168E-8 7.7995743E-8 8.1655013E-8 8.5270324E-8 8.8898984E-8 9.2515552E-8 9.6140685E-8 9.9775817E-8 1.0340247E-7 1.0702705E-7 1.1066372E-7 1.1428066E-7 1.1836930E-7 1.2722209E-7 1.3609489E-7 1.4497262E-7 1.5380000E-7 1.6270191E-7 1.7154306E-7 1.8029665E-7 1.8640361E-7 1.9250830E-7 1.9862516E-7 2.0469797E-7 2.1085719E-7 2.1692768E-7 2.2300745E-7 2.2149554E-7 2.1991236E-7 2.1832594E-7 2.1673669E-7 2.1515818E-7 2.1352369E-7 2.1025867E-7 2.0689027E-7 2.0346240E-7 2.0020741E-7 1.9686833E-7 1.9346331E-7 1.9006707E-7 1.8676958E-7 1.8330953E-7 1.8017814E-7 1.7652803E-7 1.7347792E-7 1.6994595E-7 1.6662052E-7 1.6270001E-7 1.5921305E-7 1.5651838E-7 1.5346322E-7 1.4986468E-7 1.4557728E-7 1.4301547E-7 1.4015757E-7 1.3685837E-7 1.3295624E-7 1.2818042E-7 1.2202332E-7 1.1334537E-7 9.8510323E-8'
  a2='7.4592699E-8 7.8876361E-8 8.3133435E-8 8.7340721E-8 9.1623728E-8 9.5855285E-8 1.0010247E-7 1.0433549E-7 1.0857855E-7 1.1283330E-7 1.1707814E-7 1.2132054E-7 1.2557709E-7 1.2981056E-7 1.3452680E-7 1.4407849E-7 1.5365178E-7 1.6323039E-7 1.7275466E-7 1.8235935E-7 1.9189849E-7 2.0132424E-7 2.0747781E-7 2.1362910E-7 2.1979265E-7 2.2591182E-7 2.3211806E-7 2.3823488E-7 2.4436107E-7 2.4344606E-7 2.4246339E-7 2.4147872E-7 2.4049229E-7 2.3951253E-7 2.3849079E-7 2.3508381E-7 2.3156896E-7 2.2799205E-7 2.2459554E-7 2.2111128E-7 2.1755822E-7 2.1401432E-7 2.1057345E-7 2.0696297E-7 2.0369543E-7 1.9988662E-7 1.9670390E-7 1.9301836E-7 1.8954835E-7 1.8545738E-7 1.8181881E-7 1.7900698E-7 1.7581899E-7 1.7206399E-7 1.6759017E-7 1.6491698E-7 1.6193483E-7 1.5849218E-7 1.5442040E-7 1.4943693E-7 1.4301213E-7 1.3395688E-7 1.1847682E-7'
  a3='7.0812725E-8 7.5013209E-8 7.9187623E-8 8.3313215E-8 8.7513058E-8 9.1662449E-8 9.5827162E-8 9.9977995E-8 1.0413866E-7 1.0831080E-7 1.1247321E-7 1.1663324E-7 1.2080714E-7 1.2495841E-7 1.2958697E-7 1.3899889E-7 1.4843208E-7 1.5787051E-7 1.6725541E-7 1.7671954E-7 1.8611909E-7 1.9540473E-7 2.0141845E-7 2.0742994E-7 2.1345341E-7 2.1943351E-7 2.2549870E-7 2.3147651E-7 2.3746346E-7 2.3681817E-7 2.3610847E-7 2.3539732E-7 2.3468489E-7 2.3397728E-7 2.3323793E-7 2.3050525E-7 2.2768605E-7 2.2481707E-7 2.2209279E-7 2.1929812E-7 2.1644827E-7 2.1360577E-7 2.1084591E-7 2.0795000E-7 2.0532916E-7 2.0227418E-7 1.9972137E-7 1.9676527E-7 1.9398203E-7 1.9070073E-7 1.8778230E-7 1.8552697E-7 1.8296994E-7 1.7995812E-7 1.7636975E-7 1.7422563E-7 1.7183369E-7 1.6907240E-7 1.6580649E-7 1.6180934E-7 1.5665611E-7 1.4939305E-7 1.3697676E-7'
  a4='5.3971015E-8 5.7963555E-8 6.1931314E-8 6.5852669E-8 6.9844599E-8 7.3788574E-8 7.7747113E-8 8.1692459E-8 8.5647150E-8 8.9612749E-8 9.3569101E-8 9.7523182E-8 1.0149046E-7 1.0543622E-7 1.0980375E-7 1.1837697E-7 1.2696958E-7 1.3556697E-7 1.4411558E-7 1.5273638E-7 1.6129834E-7 1.6975552E-7 1.7520982E-7 1.8066210E-7 1.8612526E-7 1.9154907E-7 1.9705005E-7 2.0247179E-7 2.0790181E-7 2.0714254E-7 2.0632365E-7 2.0550309E-7 2.0468106E-7 2.0386459E-7 2.0301723E-7 2.0095885E-7 1.9883529E-7 1.9667424E-7 1.9462218E-7 1.9251711E-7 1.9037047E-7 1.8822936E-7 1.8615050E-7 1.8396917E-7 1.8199503E-7 1.7969387E-7 1.7777098E-7 1.7554430E-7 1.7344783E-7 1.7097621E-7 1.6877791E-7 1.6707909E-7 1.6515301E-7 1.6288437E-7 1.6018144E-7 1.5856638E-7 1.5676466E-7 1.5468473E-7 1.5222469E-7 1.4921385E-7 1.4533220E-7 1.3986132E-7 1.3050878E-7'
  a5='4.6505812E-8 5.0872651E-8 5.5212387E-8 5.9501369E-8 6.3867542E-8 6.8181265E-8 7.2510916E-8 7.6826138E-8 8.1151580E-8 8.5488954E-8 8.9816214E-8 9.4140990E-8 9.8480196E-8 1.0279587E-7 1.0752401E-7 1.1633021E-7 1.2515631E-7 1.3398732E-7 1.4276824E-7 1.5162330E-7 1.6041792E-7 1.6910253E-7 1.7465007E-7 1.8019555E-7 1.8575209E-7 1.9126861E-7 1.9686363E-7 2.0237804E-7 2.0790089E-7 2.0768476E-7 2.0741180E-7 2.0713828E-7 2.0686427E-7 2.0659211E-7 2.0630805E-7 2.0531435E-7 2.0428918E-7 2.0324592E-7 2.0225527E-7 2.0123903E-7 2.0020272E-7 1.9916908E-7 1.9816550E-7 1.9711244E-7 1.9615941E-7 1.9504851E-7 1.9412021E-7 1.9304526E-7 1.9203318E-7 1.9083998E-7 1.8977873E-7 1.8895861E-7 1.8802878E-7 1.8693358E-7 1.8562871E-7 1.8484903E-7 1.8397924E-7 1.8297513E-7 1.8178753E-7 1.8033402E-7 1.7846012E-7 1.7581901E-7 1.7130399E-7'
  a6='4.0354702E-8 4.5095842E-8 4.9807556E-8 5.4464164E-8 5.9204581E-8 6.3888052E-8 6.8588817E-8 7.3273915E-8 7.7970109E-8 8.2679258E-8 8.7377426E-8 9.2072897E-8 9.6784035E-8 1.0146963E-7 1.0661420E-7 1.1630567E-7 1.2601906E-7 1.3573784E-7 1.4540150E-7 1.5514675E-7 1.6482548E-7 1.7439133E-7 1.8068475E-7 1.8697585E-7 1.9327948E-7 1.9953772E-7 2.0588501E-7 2.1214086E-7 2.1840628E-7 2.1819754E-7 2.1792458E-7 2.1765106E-7 2.1737705E-7 2.1710489E-7 2.1681971E-7 2.1561307E-7 2.1436823E-7 2.1310141E-7 2.1189847E-7 2.1066446E-7 2.0940609E-7 2.0815095E-7 2.0693231E-7 2.0565360E-7 2.0449634E-7 2.0314739E-7 2.0202017E-7 2.0071488E-7 1.9948591E-7 1.9803703E-7 1.9674837E-7 1.9575251E-7 1.9462343E-7 1.9329353E-7 1.9170905E-7 1.9076230E-7 1.8970611E-7 1.8848684E-7 1.8704475E-7 1.8527977E-7 1.8300432E-7 1.7979725E-7 1.7431472E-7'
  a7='3.4282813E-8 3.9273487E-8 4.4233186E-8 4.9134879E-8 5.4124792E-8 5.9054762E-8 6.4002935E-8 6.8934618E-8 7.3877981E-8 7.8834980E-8 8.3780420E-8 8.8723022E-8 9.3682115E-8 9.8614316E-8 1.0401392E-7 1.1403155E-7 1.2407182E-7 1.3411768E-7 1.4410655E-7 1.5417976E-7 1.6418422E-7 1.7408507E-7 1.8089129E-7 1.8769500E-7 1.9451227E-7 2.0128044E-7 2.0814492E-7 2.1491050E-7 2.2168644E-7 2.2235034E-7 2.2295086E-7 2.2355260E-7 2.2415542E-7 2.2475417E-7 2.2536376E-7 2.2461849E-7 2.2384961E-7 2.2306716E-7 2.2232418E-7 2.2156199E-7 2.2078476E-7 2.2000953E-7 2.1925684E-7 2.1846705E-7 2.1775228E-7 2.1691910E-7 2.1622288E-7 2.1541667E-7 2.1465760E-7 2.1376270E-7 2.1296677E-7 2.1235168E-7 2.1165430E-7 2.1083290E-7 2.0985425E-7 2.0926949E-7 2.0861714E-7 2.0786406E-7 2.0697336E-7 2.0588323E-7 2.0447780E-7 2.0249697E-7 1.9911070E-7'
  a8='2.8610931E-8 3.3393660E-8 3.8146704E-8 4.2844159E-8 4.7626158E-8 5.2350711E-8 5.7092711E-8 6.1818906E-8 6.6556295E-8 7.1306751E-8 7.6046130E-8 8.0782790E-8 8.5535253E-8 9.0261946E-8 9.5464308E-8 1.0538875E-7 1.1533563E-7 1.2528804E-7 1.3518399E-7 1.4516350E-7 1.5507489E-7 1.6488437E-7 1.7164397E-7 1.7840107E-7 1.8517164E-7 1.9189346E-7 1.9871092E-7 2.0543016E-7 2.1215968E-7 2.1255202E-7 2.1287957E-7 2.1320779E-7 2.1353660E-7 2.1386319E-7 2.1419318E-7 2.1330595E-7 2.1239062E-7 2.1145914E-7 2.1057463E-7 2.0966727E-7 2.0874200E-7 2.0781911E-7 2.0692305E-7 2.0598282E-7 2.0513190E-7 2.0414003E-7 2.0331119E-7 2.0235142E-7 2.0144777E-7 2.0038242E-7 1.9943488E-7 1.9870263E-7 1.9787242E-7 1.9689456E-7 1.9572951E-7 1.9503337E-7 1.9425676E-7 1.9336024E-7 1.9229988E-7 1.9100211E-7 1.8932898E-7 1.8697085E-7 1.8293959E-7'
  els_geom=transpose($
           [[double(strsplit(a1,' ',/extract))],$
            [double(strsplit(a2,' ',/extract))],$
            [double(strsplit(a3,' ',/extract))],$
            [double(strsplit(a4,' ',/extract))],$
            [double(strsplit(a5,' ',/extract))],$
            [double(strsplit(a6,' ',/extract))],$
            [double(strsplit(a7,' ',/extract))],$
            [double(strsplit(a8,' ',/extract))]])
                    

  ;-------------------------
  ;32
  x=findgen(63)+1
  conv32=[(1.+2.),(3.+4.),(5.+6.),(7.+8.),(9.+10.),$
          (11.+12.),(13.+14.),(15.+16.),(17.+18.),(19.+20.),$
          (21.+22.),(23.+24.),(25.+26.),(27.+28.),(29.+30.),$
          (31.+32.),(33.+34.),(35.+36.),(37.+38.),(39.+40.),$
          (41.+42.),(43.+44.),(45.+46.),(47.+48.),(49.+50.),$
          (51.+52.),(53.+54.),(55.+56.),(57.+58.),(59.+60.),$
          (61.+62.)]/2.
  conv32=[conv32,63.]
  els_geom32=dblarr(8,32)
  els_energies32=interpol(els_energies,x,conv32)
  els_upper32=[etop,(els_energies32+els_energies32[1:31])/2]
  els_lower32=[els_upper32[1:31],ebottom]
  for i=0, 7 do els_geom32[i,*]=interpol(els_geom[i,*],x,conv32)
  eff_temp=replicate(1.,32)
  els_eff32=[[eff_temp],[eff_temp],[eff_temp]]



  ;--------------
  ;8
  x=findgen(63)+1
  conv8=[(1.+8.),(9.+16.),(17.+24.),(25.+32.),$
         (33.+40.),(41.+48.),(49.+56.),(57.+63)]/2.
  els_energies8=interpol(els_energies,x,conv8)
  els_upper8=[etop,(els_energies8+els_energies8[1:7])/2]
  els_lower8=[els_upper8[1:7],ebottom]
  els_geom8=dblarr(8,8)
  for i=0, 7 do els_geom8[i,*]=interpol(els_geom[i,*],x,conv8)
  eff_temp=replicate(1.,8)
  els_eff8=[[eff_temp],[eff_temp],[eff_temp]]



  temp={e_mass_amu:e_mass,$
        ims_dt:ims_dt,$
        ims_energies:IMS_ENERGIES,$
        els_upper:els_upper,$
        els_lower:els_lower,$
        ims_geom:IMS_GEOM,$
        ims_ctm:ims_ctm,$
        ims_eff_1amu:eff1,$
        ims_eff_17amu:eff2,$
        ims_upper:ims_upper,$
        ims_lower:ims_lower,$
        els_dt:els_dt,$
        els_energies:ELS_ENERGIES,$
        els_geom:ELS_GEOM,$
        els_eff:els_eff,$
        els_energies32:els_energies32,$
        els_upper32:els_upper32,$
        els_lower32:els_lower32,$
        els_geom32:els_geom32,$        
        els_eff32:els_eff32,$
        els_energies8:els_energies8,$
        els_upper8:els_upper8,$
        els_lower8:els_lower8,$
        els_geom8:els_geom8, $
        els_eff8:els_eff8 }
        
   
   *(self.const)=temp
   return,1
   
end





;*************************************************
;Load Constants
;*************************************************
function caps::load_constants

  constants=*(self.const)
  RETURN, constants

end





;*************************************************
;Load Adjusted Constants
;*************************************************
function caps::load_adjusted_constants_2d,counts,eph

  const=*(self.const)  
  cc=size(counts)
  if cc[1] ne 8 or cc[2] ne 63 then stop
  ccc=n_elements(cc)
  if ccc EQ 5 then counts=reform(counts,8,63,1)
  cc=size(counts)
  ccc=n_elements(cc)
  cts=reform(transpose(counts,[1,0,2]),cc[ccc-1])
  erg=reform(rebin(reform(rebin(const.ims_energies,63,8),63*8),63*8,cc[3]),63*8*cc[3])
  geo=reform($
      transpose($
      reform($
      rebin($
      const.ims_geom,8,63,cc[3]),8,63,cc[3]),[1,0,2]),cc[5])
  eff_1amu=reform($
           rebin($
           reform($
           rebin(const.ims_eff_1amu,63,8),63*8),cc[1]*cc[2],cc[3]),cc[5])
  eff_17amu=reform($
            rebin($
            reform($
            rebin(const.ims_eff_1amu,63,8),63*8),cc[1]*cc[2],cc[3]),cc[5])
  mag=reform(transpose(rebin(eph.mag_angle,3,8,cc[3],63),[0,3,1,2]),3,cc[5])
  stat={cts:cts,$
        r:eph[0].r,$
        sc_p_vel:eph[0].sc_rtp_vel[2],$
        e:erg,$
        geom:geo,$
        eff1:eff_1amu,$
        eff2:eff_17amu,$
        ims_dt:const.ims_dt,$
        xx:reform(mag[0,*]),$
        yy:reform(mag[1,*]),$
        zz:reform(mag[2,*])}
  return, stat

end







;*************************************************
;Load Adjusted Constants Single Anode
;*************************************************
function caps::load_adjusted_constants_single,counts,eph,anode

  const=*(self.const)
  stat={cts:reform(counts[anode,2:62]),$
        r:eph[0].r,$
        sc_p_vel:eph[0].sc_rtp_vel[2],$
        e:const.ims_energies[2:62],$
        geom:reform(const.ims_geom[anode,2:62]),$
        eff1:const.ims_eff_1amu[2:62],$
        eff2:const.ims_eff_17amu[2:62],$
        ims_dt:const.ims_dt,$
        xx:1.D,$
        yy:0.D,$
        zz:0.D}
  return, stat

end





;*************************************************
;Load Adjusted Constants Single Anode
;*************************************************
function caps::load_els_adjusted_constants_single,counts,eph,anode

  const=*(self.const)
  pp=where(counts[anode,*] NE 'ffff'x,nn) 
  CASE nn of
     63: BEGIN
        geom=reform(const.els_geom[anode,*])
        energies=const.els_energies
     END
     32: BEGIN
        geom=reform(const.els_geom32[anode,*])
        energies=const.els_energies32
     END
     8: BEGIN
        geom=reform(const.els_geom8[anode,*])
        energies=const.els_energies8
     END
     ELSE: BEGIN
        nn=63.
        pp=indgen(nn)
        geom=dblarr(nn)
        counts=dblarr(8,nn)
        counts[*]='ffff'x
        geom[*]=1.D
        energies=replicate('ffff'x*1.D,nn)        
     END
;        stop, 'Weird energy bins:',nn
  ENDCASE

  eff=replicate(1.D,nn)
  stat={cts:reform(counts[anode,pp]),$
        r:eph[0].r,$
        e_mass_amu:const.e_mass_amu,$
        sc_p_vel:eph[0].sc_rtp_vel[2],$
        e:energies,$
        geom:geom,$
        eff1:eff,$
        eff2:eff,$
        eff3:eff,$
        els_dt:const.els_dt,$
        xx:1.D,$
        yy:0.D,$
        zz:0.D}
  return, stat

end




;*************************************************
;Load ELS Test Constants
;*************************************************
function caps::load_els_test_constants

  const=*(self.const)
  enr_num=128.D
  geom=replicate(1.D,enr_num)
  energies=exp(dindgen(enr_num)/7.5)
  eff=replicate(1.D,enr_num)
  cts=replicate(1.D,enr_num)
  dt=replicate(1.D,enr_num)
  stat={cts:cts,$
        r:10.,$
        e_mass_amu:const.e_mass_amu,$
        sc_p_vel:0.D,$
        e:energies,$
        geom:geom,$
        eff1:eff,$
        eff2:eff,$
        eff3:eff,$
        els_dt:dt,$
        xx:1.D,$
        yy:0.D,$
        zz:0.D}
  return, stat


end










;*************************************************
;MySql strings to counts
;*************************************************
function caps::cts_arr,nn
  temp=replicate({$
       a1:'',$
       a2:'',$
       a3:'',$
       a4:'',$
       a5:'',$
       a6:'',$
       a7:'',$
       a8:''},nn)
  return, temp
end





;*************************************************
;MySql strings to counts
;*************************************************
function caps::mysql_to_counts,var


  const=*(self.const)
  ;-----------------------------------                                   
  ;Error Check 1
  if size(var,/type) ne 8 then begin
     print,"Error: variable passed not a structure."
     return, ' '
  endif
  tags=strupcase(tag_names(var))
  pp=where(tags eq 'A1' or tags eq 'A2' or $
           tags eq 'A3' or tags eq 'A4' or $
           tags eq 'A5' or tags eq 'A6' or $
           tags eq 'A7' or tags eq 'A8',cc)


  ;------------------------------------
  ;Error Check 2
  if cc lt 8 then begin
     print, "Error: structure must contain a1, a2..."
     stop
     return, ' '
  endif  


  ;-----------------------------------
  ;Extract Counts
  temp=execute("nn=n_elements(var."+tags[pp[0]]+")")
  counts=fltarr(cc,63,nn)
  counts_cor=fltarr(cc,63,nn)
  for j=0., nn-1 DO BEGIN
     for i=0., cc-1 DO BEGIN
        cmd="ttemp=strsplit(var"+$
            "["+string(j,format='(I7)')+"]."+$            
            tags[pp[i]]+$
            "  ,',',/extract)"
        temp=execute(cmd)
        ntt=n_elements(ttemp)
        IF ntt NE 63 THEN ttemp=[ttemp,replicate('65535',63-ntt)] ;filler
        counts[i,*,j]=float(ttemp)
     endfor
     counts_cor[*,*,j]=invert(const.ims_ctm)#reform(counts[*,*,j])
  endfor
 
  counts={orig:counts,corr:counts_cor}
  return, counts
end


;*************************************************
;MySql ELS strings to counts
;*************************************************
function caps::els_mysql_to_counts,var


  const=*(self.const)
  ;-----------------------------------                                   
  ;Error Check 1
  if size(var,/type) ne 8 then begin
     print,"Error: variable passed not a structure."
     return, ' '
  endif
  tags=strupcase(tag_names(var))
  pp=where(tags eq 'A1' or tags eq 'A2' or $
           tags eq 'A3' or tags eq 'A4' or $
           tags eq 'A5' or tags eq 'A6' or $
           tags eq 'A7' or tags eq 'A8',cc)


  ;------------------------------------
  ;Error Check 2
  if cc lt 8 then begin
     print, "Error: structure must contain a1, a2..."
     stop
     return, ' '
  endif  


  ;-----------------------------------
  ;Extract Counts
  temp=execute("nn=n_elements(var."+tags[pp[0]]+")")
  counts=fltarr(cc,63,nn)
  for j=0., nn-1 DO BEGIN
     for i=0., cc-1 DO BEGIN
        cmd="ttemp=strsplit(var"+$
            "["+string(j,format='(I7)')+"]."+$            
            tags[pp[i]]+$
            "  ,',',/extract)"
        temp=execute(cmd)
        ntt=n_elements(ttemp)
        IF ntt NE 63 THEN ttemp=[ttemp,replicate('65535',63-ntt)] ;filler
        counts[i,*,j]=float(ttemp)
     endfor
  endfor
 
  return, counts
end




;*************************************************
;MySql ELS strings to counts
;*************************************************
function caps::els_sqlite_to_counts,var


  const=*(self.const)
  ;-----------------------------------                                   
  ;Error Check 1
  if size(var,/type) ne 7 then begin
     print,"Error: variable passed not a string array."
     return, ' '
  endif

  nn1=n_elements(var[*,0])
  nn2=n_elements(var[0,*])
  ;-----------------------------------
  ;Extract Counts
  counts=dblarr(nn1,63,nn2)
  for j=0., nn2-1 DO BEGIN
     for i=0., nn1-1 DO BEGIN
        temp=strsplit(var[i,j],',',/extract)
        ntt=n_elements(temp)
        IF ntt NE 63 THEN temp=[temp,replicate('65535',63-ntt)] ;filler
        counts[i,*,j]=double(temp)
     endfor
  endfor
 
  return, counts
end









function caps::reload_constants

  ;-- allocate memory to pointer when initializing object
  self.const=ptr_new(/allocate)

  ;----------------------------------------------------------------
  ;--General Constants
  EVtoJ=double(1.6e-19)
  k=double(1.38e-23)
  e_mass=0.00054879518D ;mass of electron in AMU 


  ;----------------------------------------------------------------
  ;IMS
  ims_dt=0.0546875D
  RESTORE, '/Applications/itt/idl70/lib/rlivi/IMS_GEOM.sav'
  RESTORE, '/Applications/itt/idl70/lib/rlivi/IMS_ENERGIES.sav'
  RESTORE, '/Applications/itt/idl70/lib/rlivi/IMS_CTM.sav'
  IMS_ENERGIES=energies
  IMS_GEOM=geom*2.D    ; <----- !!!!!!!!!!!!!!!!!!!!!!                                   
  a1=0.111D
  a2=0.0665D
  b1=0.048D
  b2=0.265D
  eff1=(a1*alog(energies/1000.+14.557)+b1)
  eff2=(a2*alog(energies/1000.+14.557)+b2)
  

  ;--------------------------------------------------------------
  ;ELS
  RESTORE, '/Applications/itt/idl70/lib/rlivi/ELS_GEOM.sav'
  RESTORE, '/Applications/itt/idl70/lib/rlivi/ELS_ENERGIES.sav'
  ELS_ENERGIES=energies
  ELS_GEOM=geom
  els_dt=(3.125e-2)*0.75 ;25% dead time

  eff_temp=replicate(1.,63)
  els_eff=[[eff_temp],[eff_temp],[eff_temp]]

  ;-------------------------
  ;32
  x=findgen(63)+1
  conv32=[(1.+2.),(3.+4.),(5.+6.),(7.+8.),(9.+10.),$
          (11.+12.),(13.+14.),(15.+16.),(17.+18.),(19.+20.),$
          (21.+22.),(23.+24.),(25.+26.),(27.+28.),(29.+30.),$
          (31.+32.),(33.+34.),(35.+36.),(37.+38.),(39.+40.),$
          (41.+42.),(43.+44.),(45.+46.),(47.+48.),(49.+50.),$
          (51.+52.),(53.+54.),(55.+56.),(57.+58.),(59.+60.),$
          (61.+62.)]/2.
  conv32=[conv32,63.]
  els_geom32=dblarr(8,32)
  els_energies32=interpol(els_energies,x,conv32)
  for i=0, 7 do els_geom32[i,*]=interpol(els_geom[i,*],x,conv32)
  eff_temp=replicate(1.,32)
  els_eff32=[[eff_temp],[eff_temp],[eff_temp]]

  ;--------------
  ;8
  x=findgen(63)+1
  conv8=[(1.+8.),(9.+16.),(17.+24.),(25.+32.),$
         (33.+40.),(41.+48.),(49.+56.),(57.+63)]/2.
  els_energies8=interpol(els_energies,x,conv8)
  els_geom8=dblarr(8,8)
  for i=0, 7 do els_geom8[i,*]=interpol(els_geom[i,*],x,conv8)
  eff_temp=replicate(1.,8)
  els_eff8=[[eff_temp],[eff_temp],[eff_temp]]





  temp={e_mass_amu:e_mass,$
        ims_dt:ims_dt,$
        ims_energies:IMS_ENERGIES,$
        ims_geom:IMS_GEOM,$
        ims_ctm:CTM,$
        ims_eff_1amu:eff1,$
        ims_eff_17amu:eff2,$
        els_dt:els_dt,$
        els_energies:ELS_ENERGIES,$
        els_geom:ELS_GEOM,$
        els_eff:els_eff,$
        els_energies32:els_energies32,$
        els_geom32:els_geom32,$
        els_eff32:els_eff32,$
        els_energies8:els_energies8,$
        els_geom8:els_geom8, $
        els_eff8:els_eff8 }
        
   
   *(self.const)=temp
   return,1

end   







;*************************************************
;1D ELS Start 1M2K
;*************************************************
function caps::load_els_1m2k_1d_start,rr

  if rr lt 2 and rr ne 65535 then rr=2
  if rr gt 19 and rr ne 65535 then rr=19
  CASE rr OF
     2:start_cor=[0.0,0.0,0.0,0.0,0.0,$
                  10.0, 10.0, 10.0, 0.00054879518D,$
                  10.0, 50.0, 10.0, 0.00054879518D,$
                  10.0,  2.0]
     3:start_cor=[120.0, 0.0, 0.0, 0.0, 0.0,$
                  2.0, 0.60, 1000.0, 0.00054879518D,$
                  0.08, 32.0, 10.0, 0.00054879518D,$
                   0.1,  0.1]
     4:start_cor=[30.0,0.0,0.0,0.0,0.0,$
                  3.0, 1.0, 10.0, 0.00054879518D,$
                  0.1, 20.0, 10.0, 0.00054879518D,$
                  0.1,  0.1]
     5:start_cor=[10.0,0.0,0.0,0.0,0.0,$
                  10.0, 10.0, 10.0, 0.00054879518D,$
                  10.0, 50.0, 10.0, 0.00054879518D,$
                  10.0,  2.0]
     6:start_cor=[5.0,0.0,0.0,0.0,0.0,$
                  10.0, 10.0, 10.0, 0.00054879518D,$
                  10.0, 50.0, 10.0, 0.00054879518D,$
                  10.0,  2.0]
     7:start_cor=[5.0,0.0,0.0,0.0,0.0,$
                  10.0,  10.0, 100.0, 0.00054879518D,$
                  5.08,   5.,   10.0, 0.00054879518D,$
                  4.,0.5]
     8:start_cor=[1.0,0.0,0.0,0.0,0.0,$
                  10.0,  10.0, 100., 0.00054879518D,$
                  2.08, 5.,10.0, 0.00054879518D,$
                  4.,0.5]
     9:start_cor=[1.0,0.0,0.0,0.0,0.0,$
                  1.0,   20.5,  10., 0.00054879518D,$
                  0.03, 1000.0, 10.0, 0.00054879518D,$
                  0.5,0.2]
     10:start_cor=[1.0,0.0,0.0,0.0,0.0,$
                   1.0,  20.35,  10., 0.00054879518D,$
                   0.03, 1000., 10.0, 0.00054879518D,$
                   0.5,0.5]
     11:start_cor=[1.0,0.0,0.0,0.0,0.0,$
                   1.00,   20.3, 10.0, 0.00054879518D,$
                   0.05, 1000.0, 10.0, 0.00054879518D,$
                   1.,0.5]
     12:start_cor=[1.0,0.0,0.0,0.0,0.0, $
                   1.00,  10.3, 10.0, 0.00054879518D,$
                   0.05,  550., 10.0, 0.00054879518D,$
                   2.,0.5]
     13:start_cor=[1.00,0.0,0.0,0.0,0.0, $
                   1.00,  10.3, 10.0, 0.00054879518D,$
                   0.05, 550.0, 10.0, 0.00054879518D,$
                   3.,0.5]
     14:start_cor=[1.0,0.0,0.0,0.0,0.0, $
                   1.00,  10.,  10.0, 0.00054879518D,$
                   0.01, 500.,  10.0, 0.00054879518D,$
                   2.,0.5]
     15:start_cor=[1.0,0.0,0.0,0.0,0.0, $
                   1.00,  10.8, 10.0, 0.00054879518D,$
                   0.01, 300.0, 10.0, 0.00054879518D,$
                   4.,0.5]
     16:start_cor=[0.1,0.0,0.0,0.0,0.0, $
                   1.00,  10.3,  10.0, 0.00054879518D,$
                   0.01, 300.0,  10.0, 0.00054879518D,$
                   4.,0.5]
     17:start_cor=[0.0,0.0,0.0,0.0,0.0, $
                   1.00,  10.,10., 0.00054879518D,$
                   0.01, 300., 10.0, 0.00054879518D,$
                   4.,0.5]
     18:start_cor=[0.0,0.0,0.0,0.0,0.0, $
                   1.00,  10.8, 10.0, 0.00054879518D,$
                   0.01, 200.0, 10.0, 0.00054879518D,$
                   4.,0.5]
     19:start_cor=[0.0,0.0,0.0,0.0,0.0, $
                   1.00,   1.8, 10.0, 0.00054879518D,$
                   0.01, 200.0, 10.0, 0.00054879518D,$
                   4.,0.5]
     65535:start_cor=[10.0,6.0,300000.,1110.1,1110.1, $
                       1.0, 100.0, 10.0, 0.00054879518D,$
                      10.0, 400.0, 10.0, 0.00054879518D,$
                      10.,5.]

  ENDCASE


  RETURN, start_cor

end













;*************************************************
;1D ELS Start 2K
;*************************************************
function caps::load_els_2k_1d_start,rr

  if rr lt 3 then rr=3
  if rr gt 19 then rr=19
  CASE rr OF
     3:start_cor=[100.0, 0.0,0.0,0.0,0.0,$
                  5.08, 1., 1000.0, 0.00054879518D,$
                  0.05,30.0, 10.0, 0.00054879518D]
     4:start_cor=[30.0, 0.0,0.0,0.0,0.0,$
                  3.08, 3., 1000.0, 0.00054879518D,$
                  0.001,50.0,  10.0, 0.00054879518D]
     5:start_cor=[20.0, 0.0,0.0,0.0,0.0,$
                  1.08, 2., 100.0, 0.00054879518D,$
                  0.001,2000.0,  10.0, 0.00054879518D]
     6:start_cor=[20.0, 0.0,0.0,0.0,0.0,$
                  2.08, 10., 100.0, 0.00054879518D,$
                  0.001,1000.0,  10.0, 0.00054879518D]
     7:start_cor=[10.0, 0.0,0.0,0.0,0.0,$
                  2.08, 10.,  100.0, 0.00054879518D,$
                  0.001,1000.0,  10.0, 0.00054879518D]
     8:start_cor=[25.0, 0.0,0.0,0.0,0.0,$
                  3.4, 5.,  20.9, 0.00054879518D,$
                  0.001,1000.0,  2.5, 0.00054879518D]
     9:start_cor=[0.0, 0.0,0.0,0.0,0.0,$
                  1.0, 20.,  10.0, 0.00054879518D,$
                  0.03,1000.0,  10.0, 0.00054879518D]
     10:start_cor=[0.0, 0.0,0.0,0.0,0.0,$
                   3.0, 5.,  3.5, 0.00054879518D,$
                   0.01,550.0,  4.0, 0.00054879518D]
     11:start_cor=[0.0, 0.0,0.0,0.0,0.0,$
                   1.0, 8.,  10.0, 0.00054879518D,$
                   0.01,550.0,  10.0, 0.00054879518D]
     12:start_cor=[0.0, 0.0,0.0,0.0,0.0,$
                   0.05, 7.,  10.0, 0.00054879518D,$
                   0.01,550.0,  10.0, 0.00054879518D]
     13:start_cor=[0.0, 0.0,0.0,0.0,0.0,$
                   0.05,  6.,  10.0, 0.00054879518D,$
                   0.01,550.0, 10.0, 0.00054879518D]
     14:start_cor=[0.0, 0.0,0.0,0.0,0.0,$
                   0.05,  5.,  10.0, 0.00054879518D,$
                   0.01,550.0, 10.0, 0.00054879518D]
     15:start_cor=[0.0, 0.0,0.0,0.0,0.0,$
                   0.05,  5.,  10.0, 0.00054879518D,$
                   0.01,550.0, 10.0, 0.00054879518D]
     16:start_cor=[0.0, 0.0,0.0,0.0,0.0,$
                   0.05,  5.,  10.0, 0.00054879518D,$
                   0.01,550.0, 10.0, 0.00054879518D]
     17:start_cor=[0.0, 0.0,0.0,0.0,0.0,$
                   0.05,  5.,  10.0, 0.00054879518D,$
                   0.01,550.0, 10.0, 0.00054879518D]
     18:start_cor=[0.0, 0.0,0.0,0.0,0.0,$
                   0.05,  5.,  10.0, 0.00054879518D,$
                   0.01,550.0, 10.0, 0.00054879518D]
     19:start_cor=[0.0, 0.0,0.0,0.0,0.0,$
                   0.05,  5.,  10.0, 0.00054879518D,$
                   0.01,550.0, 10.0, 0.00054879518D]
  ENDCASE

  return, start_cor
END








;*************************************************
;2D ELS Start 2K
;*************************************************
function caps::load_els_1m2k_2d_start,rr

  CASE rr OF
     3:start_cor=[ 0.0,    0.,    0.,  0.0, 0.0,$
                   5.08,   5.,    5., 10.0, 0.00054879518D,$
                   0.05,  50.,   50., 10.0, 0.00054879518D]
     4:start_cor=[10.0,    0.,    0.,  0.0, 0.0,$
                   5.08,   5.,    5., 10.0, 0.00054879518D,$
                   0.05,  50.,   50., 10.0, 0.00054879518D]
     5:start_cor=[10.0,    0.,    0.,  0.0, 0.0,$
                  15.08,   5.,    5., 10.0, 0.00054879518D,$
                   0.05,  50.,   50., 10.0, 0.00054879518D]
     6:start_cor=[10.00,   0.,   0.,  0.0, 0.0,$
                  15.00,   5.,   5., 10.0, 0.00054879518D,$
                   0.05, 300., 300., 10.0, 0.00054879518D]
     7:start_cor=[ 0.00,   0.,   0.,  0.0, 0.0,$
                  20.08,   5.,   5., 10.0, 0.00054879518D,$
                   0.05, 500., 500., 10.0, 0.00054879518D]
     8:start_cor=[25.00,   0.,   0.,  0.0, 0.0,$
                   9.40,   5.,   5.,  3.9, 0.00054879518D,$
                   0.04, 900., 500.,  2.5, 0.00054879518D]
     9:start_cor=[ 0.00,   0.,   0.,  0.0, 0.0,$
                   5.00,   5.,   5., 10.0, 0.00054879518D,$
                   0.05, 800., 500., 10.0, 0.00054879518D]
     10:start_cor=[0.00,   0.,   0.,  0.0, 0.0,$
                   5.00,   5.,   5.,  3.5, 0.00054879518D,$
                   0.01, 550., 500.,  4.0, 0.00054879518D]
     11:start_cor=[0.00,   0.,   0.,  0.0, 0.0,$
                   1.00,   8.,  10., 10.0, 0.00054879518D,$
                   0.01, 550., 500., 10.0, 0.00054879518D]
     12:start_cor=[0.00,   0.,   0.,  0.0, 0.0,$
                   0.05,   7.,   5., 10.0, 0.00054879518D,$
                   0.01, 550., 500., 10.0, 0.00054879518D]
     13:start_cor=[0.00,   0.,   0.,  0.0, 0.0,$
                   0.05,   6.,   5., 10.0, 0.00054879518D,$
                   0.01, 550., 500., 10.0, 0.00054879518D]
     14:start_cor=[0.00,   0.,   0.,  0.0, 0.0,$
                   0.05,   5.,   5., 10.0, 0.00054879518D,$
                   0.01, 550., 500., 10.0, 0.00054879518D]
     15:start_cor=[0.0,    0.,   0.,  0.0, 0.0,$
                   0.05,   5.,   5., 10.0, 0.00054879518D,$
                   0.01, 550., 500., 10.0, 0.00054879518D]
     16:start_cor=[0.0,    0.,   0.,  0.0, 0.0,$
                   0.05,   5.,   5., 10.0, 0.00054879518D,$
                   0.01, 550., 500., 10.0, 0.00054879518D]
     17:start_cor=[0.00,   0.,   0.,  0.0, 0.0,$
                   0.05,   5.,   5., 10.0, 0.00054879518D,$
                   0.01, 550., 500., 10.0, 0.00054879518D]
     18:start_cor=[0.0,    0.,   0.,  0.0, 0.0,$
                   0.05,   5.,   5., 10.0, 0.00054879518D,$
                   0.01, 550., 500., 10.0, 0.00054879518D]
     19:start_cor=[0.00,   0.,   0.,  0.0, 0.0,$
                   0.05,   5.,   5., 10.0, 0.00054879518D,$
                   0.01, 550., 500., 10.0, 0.00054879518D]
  ENDCASE

  return, start_cor
END









;*************************************************
;2D ELS Start 2K
;*************************************************
function caps::load_els_2k_2d_start,rr

  CASE rr OF
     3:start_cor=[$
                   5.08,   5.,    5., 10.0, 0.00054879518D,$
                   0.05,  50.,   50., 10.0, 0.00054879518D]
     4:start_cor=[$
                   5.08,   5.,    5., 10.0, 0.00054879518D,$
                   0.05,  50.,   50., 10.0, 0.00054879518D]
     5:start_cor=[$
                  15.08,   5.,    5., 10.0, 0.00054879518D,$
                   0.05,  50.,   50., 10.0, 0.00054879518D]
     6:start_cor=[$
                  15.00,   5.,   5., 10.0, 0.00054879518D,$
                   0.05, 300., 300., 10.0, 0.00054879518D]
     7:start_cor=[$
                  20.08,   5.,   5., 10.0, 0.00054879518D,$
                   0.05, 500., 500., 10.0, 0.00054879518D]
     8:start_cor=[$
                   9.40,   5.,   5.,  3.9, 0.00054879518D,$
                   0.04, 900., 500.,  2.5, 0.00054879518D]
     9:start_cor=[$
                   5.00,   5.,   5., 10.0, 0.00054879518D,$
                   0.05, 800., 500., 10.0, 0.00054879518D]
     10:start_cor=[$
                   5.00,   5.,   5.,  3.5, 0.00054879518D,$
                   0.01, 550., 500.,  4.0, 0.00054879518D]
     11:start_cor=[$
                   1.00,   8.,  10., 10.0, 0.00054879518D,$
                   0.01, 550., 500., 10.0, 0.00054879518D]
     12:start_cor=[$
                   0.05,   7.,   5., 10.0, 0.00054879518D,$
                   0.01, 550., 500., 10.0, 0.00054879518D]
     13:start_cor=[$
                   0.05,   6.,   5., 10.0, 0.00054879518D,$
                   0.01, 550., 500., 10.0, 0.00054879518D]
     14:start_cor=[$
                   0.05,   5.,   5., 10.0, 0.00054879518D,$
                   0.01, 550., 500., 10.0, 0.00054879518D]
     15:start_cor=[$
                   0.05,   5.,   5., 10.0, 0.00054879518D,$
                   0.01, 550., 500., 10.0, 0.00054879518D]
     16:start_cor=[0.0,    0.,   0.,  0.0, 0.0,$
                   $
                   0.01, 550., 500., 10.0, 0.00054879518D]
     17:start_cor=[0.00,   0.,   0.,  0.0, 0.0,$
                   $
                   0.01, 550., 500., 10.0, 0.00054879518D]
     18:start_cor=[$
                   0.05,   5.,   5., 10.0, 0.00054879518D,$
                   0.01, 550., 500., 10.0, 0.00054879518D]
     19:start_cor=[$
                   0.05,   5.,   5., 10.0, 0.00054879518D,$
                   0.01, 550., 500., 10.0, 0.00054879518D]
  ENDCASE

  return, start_cor
END










function caps::load_ims_2m_2d_start,rr
  mass=[1.,17.]
  if rr gt 17 then rr=17
  case rr of
     1: a=[1.,  -3.,   15000.,1000.,0., 3.0,10.,10.,mass[0],240.10, 50.0,10.,mass[1]]
     2: a=[1.,  -3.,   15000.,1000.,0., 3.0,10.,10.,mass[0],240.10, 50.0,10.,mass[1]]
     3: a=[1.,  -3.,   15000.,0.,0., 3.0,10.,10.,mass[0],240.10, 50.0,10.,mass[1]]    
     4: a=[1.,  -3.,   15000.,0.,0., 4.0,10.,10.,mass[0],250.10, 60.0,10.,mass[1]]    
     5: a=[1.,  -3.,   25000.,0.,0., 5.0,10.,10.,mass[0],350.00, 70.0,10.,mass[1]]    
     6: a=[10., -5.,   15000.,45000.,0., 1.5, 9.,10.,mass[0],  10., 90.0,40.,mass[1]] 
     7: a=[1.,  -2.,   50000.,0.,0., 3.0,10.,10.,mass[0], 15.10, 60.0,10.,mass[1]]    
     8: a=[3.54,-2.5,  56000.,0.,0., 1.4,16.,10.,mass[0],  3.70,130.4,10.,mass[1]]    
     9: a=[1.5, 0.,   45000.,45000.,0., 2.0,10.,10.,mass[0],  5.50,159.4,150.,mass[1]]
     10: a=[0.5,  0., 100000.,0.,0., 0.2,40.,10.,mass[0],  0.70,180.4,10.,mass[1]]    
     11: a=[0.5,  1., 100000.,0.,0., 1.0,10.,10.,mass[0],  1.50,110.0,10.,mass[1]]    
     12: a=[0.03, 2., 120000.,0.,0., 1.0,10.,10.,mass[0],  0.05, 60.0,10.,mass[1]]    
     13: a=[0.03, 2., 130000.,0.,0., 1.0,10.,10.,mass[0],  0.05, 60.0,10.,mass[1]]    
     14: a=[0.37, 3., 150000.,1000.,1000., 1.0,10.,10.,mass[0],  0.05,700.0,10.,mass[1]]
     15: a=[0.37, 3., 160000.,0.,0., 1.0,10.,10.,mass[0],  0.05,700.0,10.,mass[1]]    
     16: a=[0.37, 3., 170000.,0.,0., 1.0,10.,10.,mass[0],  0.05,700.0,10.,mass[1]]    
     17: a=[0.37, 3., 180000.,0.,0., 1.0,10.,10.,mass[0],  0.05,700.0,10.,mass[1]]    
  endcase  
  return,double(a)
end




function caps::load_ims_2m_1d_start,rr
  mass=[1.,17.]
  if rr gt 30 then rr=30
  case rr of
     1: a=[1.,  -3.,   15000.,0.,0., 3.0,10.,mass[0],240.10, 50.0,mass[1]]    
     2: a=[1.,  -3.,   15000.,0.,0., 3.0,10.,mass[0],240.10, 50.0,mass[1]]    
     3: a=[1.,  -3.,   15000.,0.,0., 3.0,10.,mass[0],240.10, 50.0,mass[1]]    
     4: a=[1.,  -3.,   15000.,0.,0., 4.0,10.,mass[0],250.10, 60.0,mass[1]]    
     5: a=[1.,  -3.,   25000.,0.,0., 5.0,10.,mass[0],350.00, 70.0,mass[1]]    
     6: a=[10., -5.,   35000.,0.,0., 2.0, 6.,mass[0], 10.00, 60.0,mass[1]] 
     7: a=[1.,  -2.,   50000.,0.,0., 3.0,10.,mass[0], 15.10, 60.0,mass[1]]    
     8: a=[3.54,-2.5,  56000.,0.,0., 1.4,16.,mass[0],  3.70,130.4,mass[1]]    
     9: a=[1.5, -1.,   70000.,0.,0., 0.5,30.,mass[0],  1.50,159.4,mass[1]]    
     10: a=[0.5,  0., 100000.,0.,0., 0.2,40.,mass[0],  0.70,180.4,mass[1]]    
     11: a=[0.5,  1., 100000.,0.,0., 1.0,10.,mass[0],  1.50,110.0,mass[1]]    
     12: a=[0.03, 2., 120000.,0.,0., 1.0,10.,mass[0],  0.05, 60.0,mass[1]]    
     13: a=[0.03, 2., 130000.,0.,0., 1.0,10.,mass[0],  0.05, 60.0,mass[1]]    
     14: a=[0.37, 3., 150000.,0.,0., 1.0,10.,mass[0],  0.05,700.0,mass[1]]
     15: a=[0.37, 3., 160000.,0.,0., 1.0,10.,mass[0],  0.05,700.0,mass[1]]    
     16: a=[0.37, 3., 170000.,0.,0., 1.0,10.,mass[0],  0.05,700.0,mass[1]]    
     17: a=[0.37, 3., 180000.,0.,0., 1.0,10.,mass[0],  0.05,700.0,mass[1]]    
     18: a=[0.37, 3., 180000.,0.,0., 1.0,10.,mass[0],  0.05,700.0,mass[1]]    
     19: a=[0.37, 3., 180000.,0.,0., 1.0,10.,mass[0],  0.05,700.0,mass[1]]    
     20: a=[0.37, 3., 180000.,0.,0., 1.0,10.,mass[0],  0.05,700.0,mass[1]]    
     21: a=[0.37, 3., 180000.,0.,0., 1.0,10.,mass[0],  0.05,700.0,mass[1]]    
     22: a=[0.37, 3., 180000.,0.,0., 1.0,10.,mass[0],  0.05,700.0,mass[1]]    
     23: a=[0.37, 3., 180000.,0.,0., 1.0,10.,mass[0],  0.05,700.0,mass[1]]    
     24: a=[0.37, 3., 180000.,0.,0., 1.0,10.,mass[0],  0.05,700.0,mass[1]]    
     25: a=[0.37, 3., 180000.,0.,0., 1.0,10.,mass[0],  0.05,700.0,mass[1]]    
     26: a=[0.37, 3., 180000.,0.,0., 1.0,10.,mass[0],  0.05,700.0,mass[1]]    
     27: a=[0.37, 3., 180000.,0.,0., 1.0,10.,mass[0],  0.05,700.0,mass[1]]    
     28: a=[0.37, 3., 180000.,0.,0., 1.0,10.,mass[0],  0.05,700.0,mass[1]]    
     29: a=[0.37, 3., 180000.,0.,0., 1.0,10.,mass[0],  0.05,700.0,mass[1]]    
     30: a=[0.37, 3., 180000.,0.,0., 1.0,10.,mass[0],  0.05,700.0,mass[1]]    
  endcase  
  return,double(a)
end



function caps::load_els_3m_1d_start,rr
  
  a=[1., 1.6,$
     5900.,0.,0., $
     0.40, 0.1, 26.,$
     0.4, 0.1, 50.,$
     0.3, 0.09, 74.]    
  return,double(a)
end








function result_els_1m2k_1d,values,values2,ans

  CASE ans OF
;     'q': GOTO, skip_end
     "y": BEGIN
        var_index1[idata]=1
        values_all[idata]=values
        values_all2[idata]=values2
        print, '*****************************************'+$
               '*****************************************'
     END
     '2': BEGIN
        var_index1[idata]=2
        values.chi2='ffff'x*1.D
        values_all[idata]=values
     END
     '3': BEGIN
        var_index1[idata]=3.
        values.chi2='ffff'x*1.D
        values_all[idata]=values
     END
;     'w': GOTO, goood
     ELSE: print, 'Nothing'
  ENDCASE
  
end
















;--------------------------------------------------
;--------------------------------------------------
;--------------------------------------------------
;--------------------------------------------------


pro caps__define

  void={caps,const:ptr_new()}
        ;, inherits MySql}
  return

end
